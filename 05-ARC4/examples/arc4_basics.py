# ARC4 Basics Examples

# This demonstrates basic ARC4 type usage
# Note: This is a simulation since we can't run actual Puya code here

print("=== ARC4 Basics Examples ===")

# 1. Basic ARC4 Types
print("\n1. Basic ARC4 Types:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Account, Asset")
print("")
print("# UInt64 - 64-bit unsigned integer")
print("amount: UInt64 = UInt64(1000)")
print("balance: UInt64 = UInt64(0)")
print("")
print("# String - UTF-8 encoded string")
print("name: String = String('Alice')")
print("message: String = String('Hello, World!')")
print("")
print("# Account - Algorand account")
print("account: Account = Account('ABCD1234567890EFGH')")
print("")
print("# Asset - Algorand Standard Asset")
print("asset: Asset = Asset(12345)")

# 2. Type Declarations
print("\n2. Type Declarations:")
print("# In Algorand Python (Puya):")
print("def transfer_tokens(")
print("    sender: Account,")
print("    recipient: Account,")
print("    amount: UInt64")
print(") -> UInt64:")
print("    # Function body")
print("    return UInt64(1)")

# 3. Type Safety
print("\n3. Type Safety:")
print("# In Algorand Python (Puya):")
print("def calculate_fee(amount: UInt64) -> UInt64:")
print("    # Type is guaranteed to be UInt64")
print("    fee = amount * UInt64(1000)")
print("    return fee")
print("")
print("# Compiler ensures types are correct")
print("result = calculate_fee(UInt64(1000))  # Correct")
print("# result = calculate_fee('1000')      # Compile error!")

# 4. Type Conversion
print("\n4. Type Conversion:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String")
print("")
print("# UInt64 to String")
print("amount: UInt64 = UInt64(1000)")
print("amount_str: String = String(str(amount))")
print("")
print("# String to UInt64")
print("amount_str: String = String('1000')")
print("amount: UInt64 = UInt64(int(amount_str))")

# 5. Type Validation
print("\n5. Type Validation:")
print("# In Algorand Python (Puya):")
print("def validate_transaction(")
print("    sender: Account,")
print("    recipient: Account,")
print("    amount: UInt64")
print(") -> UInt64:")
print("    # Validate inputs")
print("    if amount <= UInt64(0):")
print("        return UInt64(0)  # Invalid amount")
print("    ")
print("    if sender == Account(''):")
print("        return UInt64(0)  # Invalid sender")
print("    ")
print("    if recipient == Account(''):")
print("        return UInt64(0)  # Invalid recipient")
print("    ")
print("    return UInt64(1)  # Valid")

# 6. State Management
print("\n6. State Management:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Global")
print("")
print("def manage_state():")
print("    # Store in global state")
print("    Global.state[String('total_supply')] = UInt64(1000000)")
print("    Global.state[String('name')] = String('MyToken')")
print("    Global.state[String('decimals')] = UInt64(6)")
print("    ")
print("    # Retrieve from global state")
print("    total_supply: UInt64 = Global.state[String('total_supply')]")
print("    name: String = Global.state[String('name')]")
print("    decimals: UInt64 = Global.state[String('decimals')]")
print("    ")
print("    return total_supply")

# 7. Transaction Processing
print("\n7. Transaction Processing:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Account, Txn")
print("")
print("def process_transaction() -> UInt64:")
print("    # Get transaction data")
print("    amount: UInt64 = Txn.amount")
print("    sender: Account = Txn.sender")
print("    recipient: Account = Txn.receiver")
print("    ")
print("    # Process with type safety")
print("    if amount > UInt64(0) and sender != recipient:")
print("        return UInt64(1)")
print("    else:")
print("        return UInt64(0)")

# 8. Asset Operations
print("\n8. Asset Operations:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, Asset, Account")
print("")
print("def transfer_asset(")
print("    asset: Asset,")
print("    sender: Account,")
print("    recipient: Account,")
print("    amount: UInt64")
print(") -> UInt64:")
print("    # Type-safe asset transfer")
print("    if sender.asset_balance(asset) >= amount:")
print("        # Transfer logic here")
print("        return UInt64(1)  # Success")
print("    else:")
print("        return UInt64(0)  # Insufficient balance")

# 9. Array Operations
print("\n9. Array Operations:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, StaticArray, DynamicArray")
print("")
print("def array_operations():")
print("    # Static array")
print("    numbers: StaticArray[UInt64, 3] = StaticArray([UInt64(1), UInt64(2), UInt64(3)])")
print("    ")
print("    # Dynamic array")
print("    dynamic_numbers: DynamicArray[UInt64] = DynamicArray([UInt64(1), UInt64(2)])")
print("    dynamic_numbers.append(UInt64(3))")
print("    ")
print("    # Process arrays")
print("    total: UInt64 = UInt64(0)")
print("    for i in range(len(dynamic_numbers)):")
print("        total += dynamic_numbers[i]")
print("    ")
print("    return total")

# 10. Error Prevention
print("\n10. Error Prevention:")
print("# In Algorand Python (Puya):")
print("def safe_operations(")
print("    amount: UInt64,")
print("    name: String,")
print("    account: Account")
print(") -> UInt64:")
print("    # All operations are type-safe")
print("    ")
print("    # Safe arithmetic")
print("    double_amount: UInt64 = amount * UInt64(2)")
print("    ")
print("    # Safe string operations")
print("    upper_name: String = name.upper()")
print("    ")
print("    # Safe account operations")
print("    balance: UInt64 = account.balance")
print("    ")
print("    return double_amount")

# 11. Best Practices
print("\n11. Best Practices:")
print("# In Algorand Python (Puya):")
print("")
print("# Good: Use ARC4 types")
print("def good_function(amount: UInt64, name: String, account: Account) -> UInt64:")
print("    return amount")
print("")
print("# Good: Explicit types")
print("def explicit_types(amount: UInt64, name: String) -> UInt64:")
print("    return amount")
print("")
print("# Good: Validate types")
print("def validate_types(amount: UInt64, name: String) -> UInt64:")
print("    if amount > UInt64(0) and len(name) > UInt64(0):")
print("        return amount")
print("    else:")
print("        return UInt64(0)")

# 12. Type Safety Benefits
print("\n12. Type Safety Benefits:")
print("# - Compile-time error detection")
print("# - Runtime safety")
print("# - Better code documentation")
print("# - IDE support and autocomplete")
print("# - Easier debugging")
print("# - Optimized performance")

# 13. Common Patterns
print("\n13. Common Patterns:")
print("# In Algorand Python (Puya):")
print("")
print("# Pattern 1: Input validation")
print("def validate_inputs(amount: UInt64, recipient: Account) -> UInt64:")
print("    if amount <= UInt64(0):")
print("        return UInt64(0)")
print("    if recipient == Account(''):")
print("        return UInt64(0)")
print("    return UInt64(1)")
print("")
print("# Pattern 2: State management")
print("def manage_state(key: String, value: UInt64):")
print("    Global.state[key] = value")
print("")
print("# Pattern 3: Transaction processing")
print("def process_tx() -> UInt64:")
print("    amount: UInt64 = Txn.amount")
print("    if amount > UInt64(0):")
print("        return UInt64(1)")
print("    return UInt64(0)")

print("\n" + "="*50)
print("ARC4 basics examples completed!")
print("ARC4 provides type safety and standardization for Algorand smart contracts.")
