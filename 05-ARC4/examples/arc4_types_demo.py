# ARC4 Types Demo

# This demonstrates all ARC4 types and their usage
# Note: This is a simulation since we can't run actual Puya code here

print("=== ARC4 Types Demo ===")

# 1. Numeric Types
print("\n1. Numeric Types:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, BigUInt")
print("")
print("# UInt64 - 64-bit unsigned integer")
print("amount: UInt64 = UInt64(1000)")
print("balance: UInt64 = UInt64(0)")
print("max_value: UInt64 = UInt64(18446744073709551615)")
print("")
print("# BigUInt - Arbitrary precision integer")
print("large_amount: BigUInt = BigUInt(1000000000000000000)")
print("very_large: BigUInt = BigUInt(999999999999999999999999999)")

# 2. String Types
print("\n2. String Types:")
print("# In Algorand Python (Puya):")
print("from algopy import String, Bytes")
print("")
print("# String - UTF-8 encoded string")
print("name: String = String('Alice')")
print("message: String = String('Hello, World!')")
print("address: String = String('ABCD1234567890EFGH')")
print("")
print("# Bytes - Raw bytes")
print("data: Bytes = Bytes(b'hello')")
print("hash_data: Bytes = Bytes(b'0x1234567890abcdef')")

# 3. Account Types
print("\n3. Account Types:")
print("# In Algorand Python (Puya):")
print("from algopy import Account, Asset")
print("")
print("# Account - Algorand account")
print("account: Account = Account('ABCD1234567890EFGH')")
print("creator: Account = Account('CREATOR1234567890EFGH')")
print("")
print("# Asset - Algorand Standard Asset")
print("asset: Asset = Asset(12345)")
print("token: Asset = Asset(67890)")

# 4. Collection Types
print("\n4. Collection Types:")
print("# In Algorand Python (Puya):")
print("from algopy import StaticArray, DynamicArray")
print("")
print("# StaticArray - Fixed size array")
print("numbers: StaticArray[UInt64, 3] = StaticArray([UInt64(1), UInt64(2), UInt64(3)])")
print("names: StaticArray[String, 2] = StaticArray([String('Alice'), String('Bob')])")
print("")
print("# DynamicArray - Variable size array")
print("numbers: DynamicArray[UInt64] = DynamicArray([UInt64(1), UInt64(2)])")
print("names: DynamicArray[String] = DynamicArray([String('Alice')])")

# 5. Boolean Type
print("\n5. Boolean Type:")
print("# In Algorand Python (Puya):")
print("from algopy import bool")
print("")
print("# Boolean values")
print("is_active: bool = True")
print("is_frozen: bool = False")
print("")
print("# Boolean operations")
print("if is_active and not is_frozen:")
print("    print('Account is active and not frozen')")

# 6. Type Operations
print("\n6. Type Operations:")
print("# In Algorand Python (Puya):")
print("")
print("# UInt64 operations")
print("amount: UInt64 = UInt64(1000)")
print("result: UInt64 = amount + UInt64(500)")
print("result: UInt64 = amount - UInt64(200)")
print("result: UInt64 = amount * UInt64(2)")
print("result: UInt64 = amount / UInt64(2)")
print("")
print("# String operations")
print("name: String = String('Alice')")
print("length: UInt64 = len(name)")
print("upper_name: String = name.upper()")
print("lower_name: String = name.lower()")
print("full_name: String = name + String(' Smith')")
print("")
print("# Array operations")
print("numbers: DynamicArray[UInt64] = DynamicArray([UInt64(1), UInt64(2)])")
print("numbers.append(UInt64(3))")
print("first_number: UInt64 = numbers[0]")
print("last_number: UInt64 = numbers[-1]")
print("length: UInt64 = len(numbers)")

# 7. Type Conversion
print("\n7. Type Conversion:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Bytes")
print("")
print("# UInt64 to String")
print("amount: UInt64 = UInt64(1000)")
print("amount_str: String = String(str(amount))")
print("")
print("# String to UInt64")
print("amount_str: String = String('1000')")
print("amount: UInt64 = UInt64(int(amount_str))")
print("")
print("# String to Bytes")
print("text: String = String('hello')")
print("data: Bytes = Bytes(text.encode())")
print("")
print("# Bytes to String")
print("data: Bytes = Bytes(b'hello')")
print("text: String = String(data.decode())")

# 8. Type Validation
print("\n8. Type Validation:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Account")
print("")
print("def validate_inputs(")
print("    amount: UInt64,")
print("    recipient: Account,")
print("    message: String")
print(") -> UInt64:")
print("    # Validate amount")
print("    if amount <= UInt64(0):")
print("        return UInt64(0)")
print("    ")
print("    # Validate recipient")
print("    if recipient == Account(''):")
print("        return UInt64(0)")
print("    ")
print("    # Validate message length")
print("    if len(message) > UInt64(100):")
print("        return UInt64(0)")
print("    ")
print("    return UInt64(1)")

# 9. State Management with Types
print("\n9. State Management with Types:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Global")
print("")
print("def manage_global_state():")
print("    # Store different types in global state")
print("    Global.state[String('total_supply')] = UInt64(1000000)")
print("    Global.state[String('name')] = String('MyToken')")
print("    Global.state[String('decimals')] = UInt64(6)")
print("    ")
print("    # Retrieve and use")
print("    total_supply: UInt64 = Global.state[String('total_supply')]")
print("    name: String = Global.state[String('name')]")
print("    decimals: UInt64 = Global.state[String('decimals')]")
print("    ")
print("    return total_supply")

# 10. Transaction Processing with Types
print("\n10. Transaction Processing with Types:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Account, Txn")
print("")
print("def process_transaction() -> UInt64:")
print("    # Get transaction data with proper types")
print("    amount: UInt64 = Txn.amount")
print("    sender: Account = Txn.sender")
print("    recipient: Account = Txn.receiver")
print("    ")
print("    # Process with type safety")
print("    if amount > UInt64(0) and sender != recipient:")
print("        return UInt64(1)")
print("    else:")
print("        return UInt64(0)")

# 11. Asset Operations with Types
print("\n11. Asset Operations with Types:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, Asset, Account")
print("")
print("def transfer_asset(")
print("    asset: Asset,")
print("    sender: Account,")
print("    recipient: Account,")
print("    amount: UInt64")
print(") -> UInt64:")
print("    # Type-safe asset transfer")
print("    if sender.asset_balance(asset) >= amount:")
print("        # Transfer logic here")
print("        return UInt64(1)  # Success")
print("    else:")
print("        return UInt64(0)  # Insufficient balance")

# 12. Array Operations with Types
print("\n12. Array Operations with Types:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, StaticArray, DynamicArray")
print("")
print("def array_operations():")
print("    # Static array")
print("    numbers: StaticArray[UInt64, 3] = StaticArray([UInt64(1), UInt64(2), UInt64(3)])")
print("    ")
print("    # Dynamic array")
print("    dynamic_numbers: DynamicArray[UInt64] = DynamicArray([UInt64(1), UInt64(2)])")
print("    dynamic_numbers.append(UInt64(3))")
print("    ")
print("    # Process arrays")
print("    total: UInt64 = UInt64(0)")
print("    for i in range(len(dynamic_numbers)):")
print("        total += dynamic_numbers[i]")
print("    ")
print("    return total")

# 13. Type Safety Examples
print("\n13. Type Safety Examples:")
print("# In Algorand Python (Puya):")
print("from algopy import UInt64, String, Account")
print("")
print("def safe_operations(")
print("    amount: UInt64,")
print("    name: String,")
print("    account: Account")
print(") -> UInt64:")
print("    # All operations are type-safe")
print("    ")
print("    # Safe arithmetic")
print("    double_amount: UInt64 = amount * UInt64(2)")
print("    ")
print("    # Safe string operations")
print("    upper_name: String = name.upper()")
print("    ")
print("    # Safe account operations")
print("    balance: UInt64 = account.balance")
print("    ")
print("    return double_amount")

# 14. Type Error Prevention
print("\n14. Type Error Prevention:")
print("# In Algorand Python (Puya):")
print("def prevent_type_errors(")
print("    amount: UInt64,")
print("    name: String,")
print("    account: Account")
print(") -> UInt64:")
print("    # These would cause compile errors:")
print("    # return amount + name  # Cannot mix UInt64 and String")
print("    # return name * UInt64(2)  # Cannot multiply String by UInt64")
print("    # return account + amount  # Cannot add Account and UInt64")
print("    ")
print("    # Correct operations:")
print("    return amount * UInt64(2)")

# 15. Type Best Practices
print("\n15. Type Best Practices:")
print("# In Algorand Python (Puya):")
print("")
print("# Good: Use ARC4 types")
print("def good_function(amount: UInt64, name: String, account: Account) -> UInt64:")
print("    return amount")
print("")
print("# Good: Explicit types")
print("def explicit_types(amount: UInt64, name: String) -> UInt64:")
print("    return amount")
print("")
print("# Good: Validate types")
print("def validate_types(amount: UInt64, name: String) -> UInt64:")
print("    if amount > UInt64(0) and len(name) > UInt64(0):")
print("        return amount")
print("    else:")
print("        return UInt64(0)")

# 16. Type Summary
print("\n16. Type Summary:")
print("ARC4 Type Categories:")
print("  - Numeric: UInt64, BigUInt")
print("  - String: String, Bytes")
print("  - Account: Account, Asset")
print("  - Collections: StaticArray, DynamicArray")
print("  - Boolean: bool")
print("")
print("Benefits:")
print("  - Type safety")
print("  - Interoperability")
print("  - Performance")
print("  - Developer experience")

print("\n" + "="*50)
print("ARC4 types demo completed!")
print("ARC4 provides comprehensive type system for Algorand smart contracts.")
